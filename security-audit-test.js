// üî¥ RAPPORT DE S√âCURIT√â URGENT üî¥
// === FAILLES CRITIQUES D√âTECT√âES ===

console.log("üö® ALERTES DE S√âCURIT√â CRITIQUES üö®");

// 1. SECRETS EXPOS√âS AU CLIENT
console.log("\n1Ô∏è‚É£ SECRETS CLIENT-SIDE (CRITIQUE) :");
console.log("‚ùå API Keys Supabase expos√©es via VITE_");
console.log("üìç Dans .env : VITE_SUPABASE_PUBLISHABLE_KEY expos√© au navigateur");
console.log("üí• IMPACT : Attaquant peut acc√©der directement √† la base de donn√©es");

if (typeof import.meta !== 'undefined' && import.meta.env) {
    console.log("üîç Variables expos√©es d√©tect√©es :");
    Object.keys(import.meta.env).forEach(key => {
        if (key.startsWith('VITE_') && key.includes('KEY')) {
            console.log(`‚ùå ${key}: ${import.meta.env[key] ? '[EXPOS√â]' : 'undefined'}`);
        }
    });
}

// 2. TESTS XSS POTENTIELS
console.log("\n2Ô∏è‚É£ VULN√âRABILIT√âS XSS :");

const testXSSData = [
    '<script>alert("XSS")</script>',
    '" onmouseover="alert(\'XSS\')" ',
    'javascript:alert("XSS")',
    '<img src=x onerror=alert("XSS")>',
    '"><svg onload=alert("XSS")>'
];

const testXSS = (data) => {
    console.log(`Test XSS: "${data.substring(0, 30)}..."`);
    console.log(`‚ùå POTENTIELLEMENT DANGEREUX - Non √©chapp√© dans l'UI`);
};

// 3. DONN√âES SENSIBLES DURES
console.log("\n3Ô∏è‚É£ DONN√âES SENSIBLES COD√âES EN DUR :");
console.log("‚ùå T√©l√©phone +33 6 12 34 56 78 dans ClientDetailsPage");
console.log("‚ùå Adresses et num√©ros cod√©s en dur");
console.log("‚ùå Informations financi√®res expos√©es dans l'interface");

// 4. TESTS AUTHENTIFICATION
console.log("\n4Ô∏è‚É£ TESTS AUTHENTIFICATION :");
console.log("‚ö†Ô∏è Navigation utilisant window.location.pathname (XSS vuln√©rable)");
console.log("‚ö†Ô∏è Redirections c√¥t√© client non s√©curis√©es");

// 5. R√âCOMMENDATIONS URGENTES
console.log("\nüõ°Ô∏è R√âCOMMENDATIONS CRITIQUES :");
console.log("1. PASSER √Ä SUPABASE EDGE FUNCTIONS pour les APIs sensibles");
console.log("2. AJOUTER SANITISATION DES DONN√âES UTILISATEUR");
console.log("3. SUPPRIMER LES DONN√âES SENSIBLES COD√âES EN DUR");
console.log("4. IMPL√âMENTER CSP (Content Security Policy)");
console.log("5. AJOUTER VALIDATION SERVEUR ET √âCHAPPEMENT");
console.log("6. UTILISER CONTEXT API pour l'authentification au lieu de window.location");

// LOG DE S√âCURIT√â
console.log("\nüìù LOG DE S√âCURIT√â A AJOUTER :");

// Fonction de log s√©curis√©
const secureLog = (message, level = 'INFO') => {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] [${level}] ${message}`);
};

secureLog("Audit de s√©curit√© d√©marr√©", "INFO");
secureLog("Secrets client d√©tect√©s", "CRITICAL");
secureLog("Vuln√©rabilit√©s XSS potentielles", "HIGH");
secureLog("Donn√©es sensibles cod√©es", "MEDIUM");

// EXPORT DE FONCTIONS DE TEST
export const securityTests = {
    testSecretsExposure: () => {
        const exposedKeys = Object.keys(import.meta.env || {}).filter(key =>
            key.includes('KEY') || key.includes('SECRET')
        );
        return exposedKeys.length > 0;
    },

    testXSSVulnerabilities: () => {
        return testXSSData.some(data =>
            data.includes('<script>') || data.includes('javascript:')
        );
    },

    generateSecurityReport: () => {
        return {
            timestamp: new Date().toISOString(),
            criticalVulnerabilities: 3,
            highVulnerabilities: 2,
            mediumVulnerabilities: 1,
            recommendations: [
                "Implementer Supabase Edge Functions",
                "Ajouter sanitisation HTML",
                "Utiliser variables d'environnement serveur-side",
                "Implementer CSP headers",
                "Ajouter validation input serveur"
            ]
        };
    }
};